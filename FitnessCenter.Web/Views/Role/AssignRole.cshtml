@{
    ViewData["Title"] = "Assign Role";
    Layout = null; // No usar el layout predeterminado
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.24/css/jquery.dataTables.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/2.1.2/css/dataTables.dataTables.css" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.24/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/2.1.2/js/dataTables.js"></script>
   


</head>
<style>
    .btn-primary {
        width: 14%;
        padding: 10px;
        background-color: #E67E22 !important;
        border-color: none !important;
        color: white !important;
        border: none !important;
        box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.5);
    }

        .btn-primary:hover,
        .btn-primary:focus {
            background-color: #d35400 !important;
            border-color: none !important;
            color: white !important;
            border: 3px solid #E67E22 !important;
            transition: border 0.15s !important;
        }

        .btn-primary:focus {
            outline: none !important;
            box-shadow: none !important;
        }

    /* CSS para hacer la tabla responsive */
    .table-responsive {
        overflow-x: auto;
    }

    /* Agregar algo de margen entre los botones */
    .btn-container {
        margin-top: 20px;
    }
</style>


<body>
    <div class="container mt-4">
        <h2>Asignar Roles</h2>
        <div class="table-responsive">
            <table id="asignarRolesTable" class="table table-striped table-bordered display">
                <thead>
                    <tr>
                        <th>Identificación</th>
                        <th>Nombre</th>
                        <th>Primer Apellido</th>
                        <th>Segundo Apellido</th>
                        <th>Teléfono</th>
                        <th>Correo Electrónico</th>
                        <th>Rol</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
        <div class="text-center btn-container">
            <button class="btn btn-primary me-2">Asignar Rol</button>
            <button class="btn btn-primary">Editar Rol</button>
        </div>
    </div>

    <script>
        console.log("probando conxexion");
        // Inicialización de DataTables para la tabla con el id 'asignarRolesTable'
        let table = $('#asignarRolesTable').DataTable({
            data: [], // Inicialmente la tabla no tiene datos
            columns: [
                { data: 'cedula' },
                { data: 'nombre' },
                { data: 'firstLastName' },
                { data: 'secondLastName' },
                { data: 'phone' },
                { data: 'email' },
                { data: 'roleName' }
            ]
        });

        // Función para preparar los datos de la tabla antes de agregarlos
        const prepareTableData = (result) => {
            result.map(user => {
                user.nombre = user.nombre ? user.nombre.charAt(0).toUpperCase() + user.nombre.slice(1) : '';
                user.primer_apellido = user.primer_apellido ? user.primer_apellido.charAt(0).toUpperCase() + user.primer_apellido.slice(1) : '';
                user.segundo_apellido = user.segundo_apellido ? user.segundo_apellido.charAt(0).toUpperCase() + user.segundo_apellido.slice(1) : '';
                user.telefono = user.telefono || '';
                user.correoElectronico = user.correoElectronico || '';
                user.rol = user.rol ? user.rol.charAt(0).toUpperCase() + user.rol.slice(1) : '';
            });
            table.clear().rows.add(result).draw(); // Limpia la tabla y agrega las filas con los datos preparados
        }

        // Función que se ejecuta cuando el documento está completamente cargado
        $(document).ready(() => {
            let apiUrl = API_URL_BASE + '/Account/GetAllUsers'; // URL de la API para obtener los datos de los usuarios
            $.ajax({
                url: apiUrl,
            })
                .done((result) => {
                    prepareTableData(result); // Si la solicitud es exitosa, prepara los datos y actualiza la tabla
                })
                .fail((error) => {
                    // Si ocurre un error en la solicitud, muestra un mensaje de error usando SweetAlert2
                    Swal.fire({
                        title: "Mensaje",
                        text: "There was an error with the search: " + error.statusText,
                        icon: "error",
                    });
                });
        });
    </script>
</body>

<script src="~/js/site.js"></script>
</html>